---
import { BASE } from "@/constants";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Buscemi Revenga!</title>
        <style>
            canvas {
                border: 1px solid black;
            }
        </style>
    </head>
    <body>
        <canvas id="gameCanvas" width="400" height="600" data-base={BASE}
        ></canvas>
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                const $canvas = document.getElementById("gameCanvas") as HTMLCanvasElement;
                const BASE_DIR = $canvas.dataset.base;
                const ctx = $canvas.getContext("2d");

                // Game variables
                let bird: { jump: () => void; shoot: () => void; update: (arg0: number) => void; draw: () => void; x: number; width: any; y: number; height: any; }, pipes, boss: { reset: () => void; update: (arg0: number) => void; draw: () => void; x: number; width: any; y: number; height: any; health: number; }, lasers, score: number;
                let scaleFactor: number, baseWidth: number, baseHeight: number;
                let gameLoop: number;
                let lastFrameTime = 0;

                const SCORE_TO_BOSS = 5;

                const backgroundMusic = new Audio(`${BASE_DIR}/img/game/muffled-party-music.mp3`);
                backgroundMusic.loop = true;
                const bossMusic = new Audio(`${BASE_DIR}/img/game/boss-music.mp3`);
                bossMusic.loop = true;
                const laserMusic = new Audio(`${BASE_DIR}/img/game/retro-laser.mp3`);
                const toastySound = new Audio(`${BASE_DIR}/img/game/toasty.mp3`);
                // Load images
                const backgroundImg = new Image();
                backgroundImg.src = `${BASE_DIR}/img/game/background-night.png`;
                const birdImg = new Image();
                birdImg.src = `${BASE_DIR}/img/game/bird-midflap.png`;
                const pipeImg = new Image();
                pipeImg.src = `${BASE_DIR}/img/game/pipe-top.png`;
                const pipeBottomImg = new Image();
                pipeBottomImg.src = `${BASE_DIR}/img/game/pipe-bottom.png`;
                const bossImg = new Image();
                bossImg.src = `${BASE_DIR}/img/game/buscemi.png`;

                // Utility function for scaling
                function scale(value: number) {
                    return value * scaleFactor;
                }

                // Resize function
                function resizeCanvas() {
                    baseWidth = 400;
                    baseHeight = 600;
                    const windowRatio = window.innerWidth / window.innerHeight;
                    const gameRatio = baseWidth / baseHeight;

                    if (windowRatio < gameRatio) {
                        $canvas.width = window.innerWidth;
                        $canvas.height = window.innerWidth / gameRatio;
                    } else {
                        $canvas.height = window.innerHeight;
                        $canvas.width = window.innerHeight * gameRatio;
                    }

                    scaleFactor = $canvas.width / baseWidth;
                }

                // Bird object
                const Bird = {
                    x: 50,
                    y: 300,
                    width: 20,
                    height: 15,
                    velocity: 0,
                    gravity: 0.3,
                    jumpStrength: -7,
                    image: new Image(),

                    draw() {
                        ctx.drawImage(
                            birdImg,
                            scale(this.x),
                            scale(this.y),
                            scale(this.width),
                            scale(this.height)
                        );
                    },

                    update(deltaTime: any) {
                        this.velocity += this.gravity;
                        this.y += this.velocity;
                    },

                    jump() {
                        this.velocity = this.jumpStrength;
                    },

                    shoot() {
                        laserMusic.play();
                        lasers.push(
                            new Laser(
                                this.x + this.width,
                                this.y + this.height / 2
                            )
                        );
                    },
                };

                // Pipe object
                class Pipe {
                    gap: number;
                    x: number;
                    width: number;
                    minHeight: number;
                    maxHeight: number;
                    topY: any;
                    bottomY: any;
                    constructor() {
                        // Fixed spacing between the top and bottom pipe
                        this.gap = 200;

                        this.x = baseWidth;
                        this.width = 50;

                        // Set the minimum and maximum heights for the top pipe
                        this.minHeight = 50;
                        this.maxHeight = baseHeight - this.gap;

                        // Random height for the top pipe
                        this.topY =
                            Math.random() * (this.maxHeight - this.minHeight) +
                            this.minHeight;

                        // Bottom pipe starts after the gap
                        this.bottomY = this.topY + this.gap;

                        console.log(
                            $canvas.height,
                            this.maxHeight,
                            scale(this.maxHeight)
                        );
                    }
                    draw() {
                        // Draw top pipe
                        ctx.save();
                        ctx.drawImage(
                        pipeImg,
                            scale(this.x),
                            0,
                            scale(this.width),
                            scale(this.topY)
                        );
                        ctx.restore();

                        // Draw bottom pipe
                        ctx.save();
                        ctx.scale(1, -1); // Flip vertically
                        ctx.drawImage(
                        pipeImg,
                            scale(this.x),
                            scale(-this.bottomY),
                            scale(this.width),
                            scale(-(baseHeight - this.bottomY))
                        );
                        ctx.restore();
                    }

                    update(deltaTime: number) {
                        this.x -= 150 * deltaTime; // Increased speed
                    }
                }

                // Boss object
                const Boss = {
                    x: baseWidth,
                    y: baseHeight / 2 - 50,
                    width: 75,
                    height: 100,
                    health: 200,
                    maxHealth: 2000,
                    moveAmplitude: 100,
                    moveSpeed: 0.02,
                    moveAngle: 0,
                    initialY: 0,
                    attackPhase: "idle", // 'idle', 'attacking', 'returning'
                    attackSpeed: 200, // Speed of the boss during the attack
                    initialX: baseWidth,
                    nextHealthThreshold: 200, // Track health thresholds for attack

                    draw() {
                        ctx.drawImage(
                            bossImg,
                            scale(this.x),
                            scale(this.y),
                            scale(this.width),
                            scale(this.height)
                        );

                        // Draw health bar
                        ctx.fillStyle = "green";
                        const healthBarWidth =
                            (this.width * this.health) / this.maxHealth;
                        ctx.fillRect(
                            scale(this.x),
                            scale(this.y - 20),
                            scale(healthBarWidth),
                            scale(10)
                        );
                    },

                    update(deltaTime: number) {
                        // Check if health has crossed a threshold
                        if (this.attackPhase === "idle") {
                            // Regular movement
                            if (this.x > baseWidth - 150) {
                                this.x -= 100 * deltaTime; // Move boss towards center
                            } else {
                                this.moveAngle += this.moveSpeed;
                                this.y =
                                    this.initialY +
                                    Math.sin(this.moveAngle) *
                                        this.moveAmplitude;
                            }

                            // Check if it's time to attack based on health
                            if (this.health <= this.nextHealthThreshold) {
                                this.attackPhase = "attacking";
                                toastySound.play();
                            }
                        }
                        if (this.attackPhase === "attacking") {
                            // Move horizontally towards x = 0
                            if (this.x > 0) {
                                this.x -= this.attackSpeed * deltaTime;
                            } else {
                                this.attackPhase = "returning";
                                this.nextHealthThreshold -= 50; // Track health after attack
                            }
                        }
                        if (this.attackPhase === "returning") {
                            // Move back to original position
                            if (this.x < this.originalX) {
                                this.x += this.attackSpeed * deltaTime;
                            } else {
                                this.attackPhase = "idle";
                            }
                        }
                    },

                    reset() {
                        this.x = baseWidth;
                        this.y = baseHeight / 2 - 50;
                        this.health = this.maxHealth;
                        this.moveAngle = 0;
                        this.initialY = this.y;
                        this.originalX = baseWidth;
                        this.attackPhase = "idle";
                        this.nextHealthThreshold = this.maxHealth - 50;
                    },
                };

                // Laser object
                class Laser {
                    x: number;
                    y: number;
                    width: number;
                    height: number;
                    speed: number;
                    damage: number;
                    constructor(x: any, y: any) {
                        this.x = x;
                        this.y = y;
                        this.width = 20;
                        this.height = 5;
                        this.speed = 500; // Increased speed
                        this.damage = 10;
                    }

                    draw() {
                        ctx.fillStyle = "red";
                        ctx.fillRect(
                            scale(this.x),
                            scale(this.y),
                            scale(this.width),
                            scale(this.height)
                        );
                    }

                    update(deltaTime: number) {
                        this.x += this.speed * deltaTime;
                    }
                }

                // Game initialization
                function init() {
                    resizeCanvas();
                    window.addEventListener("resize", resizeCanvas);
                    bird = Object.create(Bird);
                    pipes = [];
                    lasers = [];
                    score = 0;
                    boss = null;
                    lastFrameTime = performance.now();

                    // Handle input for both keyboard and touch events
                    function handleInput(e: KeyboardEvent) {
                        e.preventDefault();

                        if (!gameLoop) {
                            startGame();
                        }

                        bird.jump();

                        if (boss) {
                            bird.shoot();
                        }
                    }

                    // Event listener for keyboard (desktop)
                    document.addEventListener("keydown", (e) => {
                        if (e.code === "Space") {
                            handleInput(e);
                        }
                    });

                    // Event listener for touch (mobile)
                    $canvas.addEventListener("touchstart", handleInput);
                    $canvas.addEventListener(
                        "touchmove",
                        (e) => e.preventDefault(),
                        { passive: false }
                    );
                }

                // Game update function
                function update(timestamp: number) {
                    const deltaTime = (timestamp - lastFrameTime) / 1000; // Time in seconds
                    lastFrameTime = timestamp;

                    // Clear canvas
                    ctx.clearRect(0, 0, $canvas.width, $canvas.height);
                    ctx.drawImage(backgroundImg, 0, 0, $canvas.width, $canvas.height)

                    // Update and draw bird
                    bird.update(deltaTime);
                    bird.draw();

                    // Update and draw pipes
                    if (
                        score < SCORE_TO_BOSS &&
                        (pipes.length == 0 ||
                            pipes[pipes.length - 1].x <= $canvas.width / 4)
                    ) {
                        pipes.push(new Pipe());
                    }
                    pipes.forEach((pipe: { update: (arg0: number) => void; draw: () => void; x: number; width: any; topY: number; bottomY: number; }, index: any) => {
                        pipe.update(deltaTime);
                        pipe.draw();
                        if (pipe.x + pipe.width < 0) {
                            pipes.splice(index, 1);
                            score++;
                        }

                        if (
                            bird.x < pipe.x + pipe.width &&
                            bird.x + bird.width > pipe.x &&
                            (bird.y < pipe.topY ||
                                bird.y + bird.height > pipe.bottomY)
                        ) {
                            gameOver();
                        }
                    });

                    // Boss fight
                    if (score >= SCORE_TO_BOSS && !boss) {
                        boss = Object.create(Boss);
                        boss.reset();
                    }
                    if (boss) {
                        backgroundMusic.pause();
                        bossMusic.play()
                        boss.update(deltaTime);
                        boss.draw();

                        // Update and draw lasers
                        lasers.forEach((laser: { update: (arg0: number) => void; draw: () => void; x: number; width: any; y: number; height: any; damage: number; }, index: any) => {
                            laser.update(deltaTime);
                            laser.draw();
                            if (laser.x > baseWidth) {
                                lasers.splice(index, 1);
                            }

                            // Check for collision with boss
                            if (
                                laser.x < boss.x + boss.width &&
                                laser.x + laser.width > boss.x &&
                                laser.y < boss.y + boss.height &&
                                laser.y + laser.height > boss.y
                            ) {
                                boss.health -= laser.damage;
                                lasers.splice(index, 1);
                            }
                        });

                        // Check if the bounding boxes of the bird and boss overlap
                        if (
                            bird.x < boss.x + boss.width &&
                            bird.x + bird.width > boss.x &&
                            bird.y < boss.y + boss.height &&
                            bird.y + bird.height > boss.y
                        ) {
                            gameOver();
                        }

                        // Check if boss is defeated
                        if (boss.health <= 0) {
                            gameWin();
                        }
                    }

                    // Draw score
                    ctx.fillStyle = "black";
                    ctx.font = "24px Arial";
                    ctx.fillText(`Score: ${score}`, 10, 30);
                    if (boss) {
                        ctx.fillText(
                            `Health: ${boss.health}`,
                            $canvas.width - 140,
                            30
                        );
                    }

                    // Check for game over
                    if (bird.y + bird.height > $canvas.height || bird.y < 0) {
                        gameOver();
                    }

                    // Request next frame
                    if (gameLoop) {
                        requestAnimationFrame(update);
                    }
                }

                function gameOver() {
                    backgroundMusic.pause();
                    bossMusic.pause();
                    gameLoop = null;
                    ctx.fillStyle = "black";
                    ctx.textAlign = "center";
                    ctx.font = "48px Arial";
                    ctx.fillText(
                        "Game Over!",
                        $canvas.width / 2,
                        $canvas.height / 2
                    );
                    ctx.font = "24px Arial";
                    ctx.fillText(
                        "Tap or press Space to restart",
                        $canvas.width / 2,
                        $canvas.height / 2 + 40
                    );
                }

                function gameWin() {
                    backgroundMusic.pause();
                    bossMusic.pause();
                    gameLoop = null;
                    ctx.fillStyle = "black";
                    ctx.textAlign = "center";
                    ctx.font = "48px Arial";
                    ctx.fillText(
                        "You Win!",
                        $canvas.width / 2,
                        $canvas.height / 2
                    );
                    ctx.font = "24px Arial";
                    ctx.fillText(
                        "Tap or press Space to restart",
                        $canvas.width / 2,
                        $canvas.height / 2 + 40
                    );
                }

                function startGame() {
                    if (!gameLoop) {
                        init();
                        gameLoop = requestAnimationFrame(update);
                        backgroundMusic.play();
                    }
                }

                function drawInitialScreen() {
                    ctx.fillStyle = "black";
                    ctx.font = "48px Arial";
                    ctx.textAlign = "center";
                    ctx.fillText(
                        "Buscemi Revenga!",
                        $canvas.width / 2,
                        $canvas.height / 2
                    );
                    ctx.font = "24px Arial";
                    ctx.fillText(
                        "Tap or Press Space to start",
                        $canvas.width / 2,
                        $canvas.height / 2 + 40
                    );
                }

                // Start by showing initial screen
                resizeCanvas();

                backgroundImg.onload = () => {
                    ctx.drawImage(backgroundImg, 0, 0, $canvas.width, $canvas.height)
                    drawInitialScreen();
                }

                // Event listener for starting the game
                document.addEventListener("keydown", (e) => {
                    if (e.code === "Space") {
                        startGame();
                    }
                });

                $canvas.addEventListener("touchstart", () => {
                    startGame();
                });
            });
        </script>
    </body>
</html>
